{"version":3,"sources":["../request.js"],"names":[],"mappings":";;;;;AAGA,IAAI,mBAAmB,EAAnB;;;AAGJ,SAAS,aAAT,CAAuB,GAAvB,EAA4B,SAA5B,EAAuC,OAAvC,EAAgD;;AAE5C,QAAI,WAAW,KAAX;;;AAFwC,QAKxC,eAAe,OAAO,OAAO,KAAK,MAAL,EAAP,EAAsB,KAAtB,CAA4B,CAAC,CAAD,CAAnC;;;AALyB,OAQ5C,IAAO,CAAC,IAAI,OAAJ,CAAY,GAAZ,CAAD,GAAoB,GAApB,GAA0B,GAA1B,CARqC;AAS5C,WAAO,mCAAmC,YAAnC;;;AATqC,oBAY5C,CAAiB,YAAjB,IAAiC,UAAS,IAAT,EAAe;AAC5C,mBAAW,IAAX;AAD4C,eAErC,iBAAiB,YAAjB,CAAP;AAF4C,iBAG5C,CAAU,IAAV;AAH4C,KAAf;;;;AAZW,aAoBnC,aAAT,GAAyB;AACrB,YAAI,QAAJ,EAAc,OAAd;AADqB,eAEd,iBAAiB,YAAjB,CAAP,CAFqB;AAGrB,gBAAQ,GAAR;AAHqB,KAAzB;;AAMA,QAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT;;;;;;AA1BwC,UAgC5C,CAAO,kBAAP,GAA4B,YAAW;AACnC,YAAI,KAAK,UAAL,IAAmB,UAAnB,IAAiC,KAAK,UAAL,IAAmB,QAAnB,EAA6B;AAC9D,iBAAK,kBAAL,GAA0B,IAA1B,CAD8D;AAE9D,uBAAW,aAAX,EAA0B,CAA1B;AAF8D,SAAlE;KADwB;;;AAhCgB,UAwC5C,CAAO,MAAP,GAAgB,OAAO,OAAP,GAAiB,aAAjB,CAxC4B;AAyC5C,WAAO,GAAP,GAAa,GAAb,CAzC4C;;AA2C5C,aAAS,IAAT,CAAc,WAAd,CAA0B,MAA1B,EA3C4C;CAAhD","file":"request.js","sourcesContent":["/**\r\n * Created by Andrey on 11.05.2016.\r\n */\r\nvar CallbackRegistry = {}; // реестр\r\n\r\n// при успехе вызовет onSuccess, при ошибке onError\r\nfunction scriptRequest(url, onSuccess, onError) {\r\n\r\n    var scriptOk = false; // флаг, что вызов прошел успешно\r\n\r\n    // сгенерировать имя JSONP-функции для запроса\r\n    var callbackName = 'cb' + String(Math.random()).slice(-6);\r\n\r\n    // укажем это имя в URL запроса\r\n    url += ~url.indexOf('?') ? '&' : '?';\r\n    url += 'jsoncallback=CallbackRegistry.' + callbackName;\r\n\r\n    // ..и создадим саму функцию в реестре\r\n    CallbackRegistry[callbackName] = function(data) {\r\n        scriptOk = true; // обработчик вызвался, указать что всё ок\r\n        delete CallbackRegistry[callbackName]; // можно очистить реестр\r\n        onSuccess(data); // и вызвать onSuccess\r\n    };\r\n\r\n    // эта функция сработает при любом результате запроса\r\n    // важно: при успешном результате - всегда после JSONP-обработчика\r\n    function checkCallback() {\r\n        if (scriptOk) return; // сработал обработчик?\r\n        delete CallbackRegistry[callbackName];\r\n        onError(url); // нет - вызвать onError\r\n    }\r\n\r\n    var script = document.createElement('script');\r\n\r\n    // в старых IE поддерживается только событие, а не onload/onerror\r\n    // в теории 'readyState=loaded' означает \"скрипт загрузился\",\r\n    // а 'readyState=complete' -- \"скрипт выполнился\", но иногда\r\n    // почему-то случается только одно из них, поэтому проверяем оба\r\n    script.onreadystatechange = function() {\r\n        if (this.readyState == 'complete' || this.readyState == 'loaded') {\r\n            this.onreadystatechange = null;\r\n            setTimeout(checkCallback, 0); // Вызвать checkCallback - после скрипта\r\n        }\r\n    };\r\n\r\n    // события script.onload/onerror срабатывают всегда после выполнения скрипта\r\n    script.onload = script.onerror = checkCallback;\r\n    script.src = url;\r\n\r\n    document.body.appendChild(script);\r\n}"]}